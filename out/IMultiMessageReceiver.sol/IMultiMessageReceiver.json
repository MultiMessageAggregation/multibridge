{
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "dstChainId",
              "type": "uint64"
            },
            {
              "internalType": "uint32",
              "name": "nonce",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint64",
              "name": "expiration",
              "type": "uint64"
            },
            {
              "internalType": "string",
              "name": "bridgeName",
              "type": "string"
            }
          ],
          "internalType": "struct MessageStruct.Message",
          "name": "_message",
          "type": "tuple"
        }
      ],
      "name": "receiveMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "receiveMessage((uint64,uint32,address,bytes,uint64,string))": "a19e38cf"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"bridgeName\",\"type\":\"string\"}],\"internalType\":\"struct MessageStruct.Message\",\"name\":\"_message\",\"type\":\"tuple\"}],\"name\":\"receiveMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"receiveMessage((uint64,uint32,address,bytes,uint64,string))\":{\"details\":\"Every receiver adapter should call this function with decoded MessageStruct.Message when receiver adapter receives a message produced by a corresponding sender adapter on the source chain.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"receiveMessage((uint64,uint32,address,bytes,uint64,string))\":{\"notice\":\"Receive messages from allowed bridge receiver adapters. If the accumulated power of a message has reached the power threshold, this message will be executed immediately, which will invoke an external function call according to the message content.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IMultiMessageReceiver.sol\":\"IMultiMessageReceiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"src/MessageStruct.sol\":{\"keccak256\":\"0x51ed95aa3e53b7cd33c136e1ecd63c961a40ce2764ad8c3740add0224879742b\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://2da643cf05e6a17cf8854171921b5f6a42b84a27e86424a76e92a89d83cc2733\",\"dweb:/ipfs/QmWmd7k7uc8jj8rUxLEXJk9YP4Ahdz273uSF6czF7GBg8G\"]},\"src/interfaces/IMultiMessageReceiver.sol\":{\"keccak256\":\"0x8cd2b004a24a975c8fe5b836645e9441f11931e1f5bcbc2085b84cbf5e1426cf\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://89036d6861589d708552f123365af6a1bbda5df052610cc6280bc4dc5bb71c1d\",\"dweb:/ipfs/QmbSkRytKyG5A83hRKEN4E1pLpXyoERFfgy7cSJwjnYtCp\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.17+commit.8df45f5f"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "struct MessageStruct.Message",
              "name": "_message",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint64",
                  "name": "dstChainId",
                  "type": "uint64"
                },
                {
                  "internalType": "uint32",
                  "name": "nonce",
                  "type": "uint32"
                },
                {
                  "internalType": "address",
                  "name": "target",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "callData",
                  "type": "bytes"
                },
                {
                  "internalType": "uint64",
                  "name": "expiration",
                  "type": "uint64"
                },
                {
                  "internalType": "string",
                  "name": "bridgeName",
                  "type": "string"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "receiveMessage"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "receiveMessage((uint64,uint32,address,bytes,uint64,string))": {
            "details": "Every receiver adapter should call this function with decoded MessageStruct.Message when receiver adapter receives a message produced by a corresponding sender adapter on the source chain."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "receiveMessage((uint64,uint32,address,bytes,uint64,string))": {
            "notice": "Receive messages from allowed bridge receiver adapters. If the accumulated power of a message has reached the power threshold, this message will be executed immediately, which will invoke an external function call according to the message content."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=lib/openzeppelin-contracts/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        ":forge-std/=lib/forge-std/src/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
        ":openzeppelin/=lib/openzeppelin-contracts/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/interfaces/IMultiMessageReceiver.sol": "IMultiMessageReceiver"
      },
      "libraries": {}
    },
    "sources": {
      "src/MessageStruct.sol": {
        "keccak256": "0x51ed95aa3e53b7cd33c136e1ecd63c961a40ce2764ad8c3740add0224879742b",
        "urls": [
          "bzz-raw://2da643cf05e6a17cf8854171921b5f6a42b84a27e86424a76e92a89d83cc2733",
          "dweb:/ipfs/QmWmd7k7uc8jj8rUxLEXJk9YP4Ahdz273uSF6czF7GBg8G"
        ],
        "license": "GPL-3.0-only"
      },
      "src/interfaces/IMultiMessageReceiver.sol": {
        "keccak256": "0x8cd2b004a24a975c8fe5b836645e9441f11931e1f5bcbc2085b84cbf5e1426cf",
        "urls": [
          "bzz-raw://89036d6861589d708552f123365af6a1bbda5df052610cc6280bc4dc5bb71c1d",
          "dweb:/ipfs/QmbSkRytKyG5A83hRKEN4E1pLpXyoERFfgy7cSJwjnYtCp"
        ],
        "license": "GPL-3.0-only"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/interfaces/IMultiMessageReceiver.sol",
    "id": 8685,
    "exportedSymbols": {
      "IMultiMessageReceiver": [
        8684
      ],
      "MessageStruct": [
        2411
      ]
    },
    "nodeType": "SourceUnit",
    "src": "42:687:52",
    "nodes": [
      {
        "id": 8675,
        "nodeType": "PragmaDirective",
        "src": "42:23:52",
        "nodes": [],
        "literals": [
          "solidity",
          "0.8",
          ".17"
        ]
      },
      {
        "id": 8676,
        "nodeType": "ImportDirective",
        "src": "67:30:52",
        "nodes": [],
        "absolutePath": "src/MessageStruct.sol",
        "file": "../MessageStruct.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 8685,
        "sourceUnit": 2412,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 8684,
        "nodeType": "ContractDefinition",
        "src": "99:629:52",
        "nodes": [
          {
            "id": 8683,
            "nodeType": "FunctionDefinition",
            "src": "652:74:52",
            "nodes": [],
            "documentation": {
              "id": 8677,
              "nodeType": "StructuredDocumentation",
              "src": "137:510:52",
              "text": " @notice Receive messages from allowed bridge receiver adapters.\n If the accumulated power of a message has reached the power threshold,\n this message will be executed immediately, which will invoke an external function call\n according to the message content.\n @dev Every receiver adapter should call this function with decoded MessageStruct.Message\n when receiver adapter receives a message produced by a corresponding sender adapter on the source chain."
            },
            "functionSelector": "a19e38cf",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "receiveMessage",
            "nameLocation": "661:14:52",
            "parameters": {
              "id": 8681,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 8680,
                  "mutability": "mutable",
                  "name": "_message",
                  "nameLocation": "707:8:52",
                  "nodeType": "VariableDeclaration",
                  "scope": 8683,
                  "src": "676:39:52",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Message_$2381_calldata_ptr",
                    "typeString": "struct MessageStruct.Message"
                  },
                  "typeName": {
                    "id": 8679,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 8678,
                      "name": "MessageStruct.Message",
                      "nameLocations": [
                        "676:13:52",
                        "690:7:52"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2381,
                      "src": "676:21:52"
                    },
                    "referencedDeclaration": 2381,
                    "src": "676:21:52",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Message_$2381_storage_ptr",
                      "typeString": "struct MessageStruct.Message"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "675:41:52"
            },
            "returnParameters": {
              "id": 8682,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "725:0:52"
            },
            "scope": 8684,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IMultiMessageReceiver",
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          8684
        ],
        "name": "IMultiMessageReceiver",
        "nameLocation": "109:21:52",
        "scope": 8685,
        "usedErrors": []
      }
    ],
    "license": "GPL-3.0-only"
  },
  "id": 52
}